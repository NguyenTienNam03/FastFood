// <auto-generated />
using System;
using AppData.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppData.Migrations
{
    [DbContext(typeof(DB_Context))]
    partial class DB_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppData.Models.Bill", b =>
                {
                    b.Property<Guid>("IDBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IDCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDPayment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDVoucher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quatity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransportFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IDBill");

                    b.HasIndex("IDCustomer");

                    b.HasIndex("IDPayment");

                    b.HasIndex("IDVoucher");

                    b.ToTable("bills");
                });

            modelBuilder.Entity("AppData.Models.BillDetail", b =>
                {
                    b.Property<Guid>("IDBillDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillIDBill")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboFastFoodIDCombo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrinksIDDrink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDBill")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDFood")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainDishesIDMainDishes")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SideDishesIDSideDishes")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDBillDetail");

                    b.HasIndex("BillIDBill");

                    b.HasIndex("ComboFastFoodIDCombo");

                    b.HasIndex("DrinksIDDrink");

                    b.HasIndex("MainDishesIDMainDishes");

                    b.HasIndex("SideDishesIDSideDishes");

                    b.ToTable("billDetails");
                });

            modelBuilder.Entity("AppData.Models.Cart", b =>
                {
                    b.Property<Guid>("IDCart")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCart");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("AppData.Models.CartDetail", b =>
                {
                    b.Property<Guid>("IDCartDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboFastFoodIDCombo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrinksIDDrink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDCart")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDFood")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDsetkey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainDishesIDMainDishes")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SideDishesIDSideDishes")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDCartDetail");

                    b.HasIndex("ComboFastFoodIDCombo");

                    b.HasIndex("DrinksIDDrink");

                    b.HasIndex("IDCart");

                    b.HasIndex("IDsetkey");

                    b.HasIndex("MainDishesIDMainDishes");

                    b.HasIndex("SideDishesIDSideDishes");

                    b.ToTable("cartDetails");
                });

            modelBuilder.Entity("AppData.Models.ComboFastFood", b =>
                {
                    b.Property<Guid>("IDCombo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionCombo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IDDrink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IDMainDishes")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IDSideDishes")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCombo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceCombo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDCombo");

                    b.HasIndex("IDDrink");

                    b.HasIndex("IDMainDishes");

                    b.HasIndex("IDSideDishes");

                    b.ToTable("comboFastFoods");
                });

            modelBuilder.Entity("AppData.Models.Customer", b =>
                {
                    b.Property<Guid>("IDCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IDRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDCustomer");

                    b.HasIndex("IDRole");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("AppData.Models.Drinks", b =>
                {
                    b.Property<Guid>("IDDrink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Mass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NameDrink")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDDrink");

                    b.ToTable("drinks");
                });

            modelBuilder.Entity("AppData.Models.MainDishes", b =>
                {
                    b.Property<Guid>("IDMainDishes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionMainDishes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Mass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NameMainDishes")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDMainDishes");

                    b.ToTable("mainDishes");
                });

            modelBuilder.Entity("AppData.Models.Payments", b =>
                {
                    b.Property<Guid>("IDPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bankaccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageQR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDPayment");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("AppData.Models.Role", b =>
                {
                    b.Property<Guid>("IDRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDRole");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("AppData.Models.Setkey", b =>
                {
                    b.Property<Guid>("IDSetKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IDCombo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IDDrink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IDMain")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IDSide")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDSetKey");

                    b.HasIndex("IDCombo");

                    b.HasIndex("IDDrink");

                    b.HasIndex("IDMain");

                    b.HasIndex("IDSide");

                    b.ToTable("setkey");
                });

            modelBuilder.Entity("AppData.Models.SideDishes", b =>
                {
                    b.Property<Guid>("IDSideDishes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionSideDishes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Mass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NameSideDishes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDSideDishes");

                    b.ToTable("sideDishes");
                });

            modelBuilder.Entity("AppData.Models.Voucher", b =>
                {
                    b.Property<Guid>("IDVoucher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Condition")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDVoucher");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("AppData.Models.Bill", b =>
                {
                    b.HasOne("AppData.Models.Customer", "Customer")
                        .WithMany("bills")
                        .HasForeignKey("IDCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Models.Payments", "Payments")
                        .WithMany("bills")
                        .HasForeignKey("IDPayment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Models.Voucher", "Voucher")
                        .WithMany("Bill")
                        .HasForeignKey("IDVoucher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payments");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("AppData.Models.BillDetail", b =>
                {
                    b.HasOne("AppData.Models.Bill", null)
                        .WithMany("Details")
                        .HasForeignKey("BillIDBill");

                    b.HasOne("AppData.Models.ComboFastFood", null)
                        .WithMany("billDetails")
                        .HasForeignKey("ComboFastFoodIDCombo");

                    b.HasOne("AppData.Models.Drinks", null)
                        .WithMany("BillDetail")
                        .HasForeignKey("DrinksIDDrink");

                    b.HasOne("AppData.Models.MainDishes", null)
                        .WithMany("BillDetail")
                        .HasForeignKey("MainDishesIDMainDishes");

                    b.HasOne("AppData.Models.SideDishes", null)
                        .WithMany("BillDetail")
                        .HasForeignKey("SideDishesIDSideDishes");
                });

            modelBuilder.Entity("AppData.Models.Cart", b =>
                {
                    b.HasOne("AppData.Models.Customer", "Customer")
                        .WithMany("carts")
                        .HasForeignKey("IDCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AppData.Models.CartDetail", b =>
                {
                    b.HasOne("AppData.Models.ComboFastFood", null)
                        .WithMany("cartDetails")
                        .HasForeignKey("ComboFastFoodIDCombo");

                    b.HasOne("AppData.Models.Drinks", null)
                        .WithMany("CartDetail")
                        .HasForeignKey("DrinksIDDrink");

                    b.HasOne("AppData.Models.Cart", "Cart")
                        .WithMany("Details")
                        .HasForeignKey("IDCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Models.Setkey", "Setkey")
                        .WithMany("CartDetail")
                        .HasForeignKey("IDsetkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppData.Models.MainDishes", null)
                        .WithMany("CartDetail")
                        .HasForeignKey("MainDishesIDMainDishes");

                    b.HasOne("AppData.Models.SideDishes", null)
                        .WithMany("CartDetail")
                        .HasForeignKey("SideDishesIDSideDishes");

                    b.Navigation("Cart");

                    b.Navigation("Setkey");
                });

            modelBuilder.Entity("AppData.Models.ComboFastFood", b =>
                {
                    b.HasOne("AppData.Models.Drinks", "Drinks")
                        .WithMany("ComboFastFood")
                        .HasForeignKey("IDDrink");

                    b.HasOne("AppData.Models.MainDishes", "MainDishes")
                        .WithMany("ComboFastFood")
                        .HasForeignKey("IDMainDishes");

                    b.HasOne("AppData.Models.SideDishes", "SideDishes")
                        .WithMany("ComboFastFood")
                        .HasForeignKey("IDSideDishes");

                    b.Navigation("Drinks");

                    b.Navigation("MainDishes");

                    b.Navigation("SideDishes");
                });

            modelBuilder.Entity("AppData.Models.Customer", b =>
                {
                    b.HasOne("AppData.Models.Role", "Role")
                        .WithMany("Customers")
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AppData.Models.Setkey", b =>
                {
                    b.HasOne("AppData.Models.ComboFastFood", "ComboFastFood")
                        .WithMany()
                        .HasForeignKey("IDCombo");

                    b.HasOne("AppData.Models.Drinks", "Drinks")
                        .WithMany()
                        .HasForeignKey("IDDrink");

                    b.HasOne("AppData.Models.MainDishes", "MainDishes")
                        .WithMany()
                        .HasForeignKey("IDMain");

                    b.HasOne("AppData.Models.SideDishes", "SideDishes")
                        .WithMany()
                        .HasForeignKey("IDSide");

                    b.Navigation("ComboFastFood");

                    b.Navigation("Drinks");

                    b.Navigation("MainDishes");

                    b.Navigation("SideDishes");
                });

            modelBuilder.Entity("AppData.Models.Bill", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("AppData.Models.Cart", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("AppData.Models.ComboFastFood", b =>
                {
                    b.Navigation("billDetails");

                    b.Navigation("cartDetails");
                });

            modelBuilder.Entity("AppData.Models.Customer", b =>
                {
                    b.Navigation("bills");

                    b.Navigation("carts");
                });

            modelBuilder.Entity("AppData.Models.Drinks", b =>
                {
                    b.Navigation("BillDetail");

                    b.Navigation("CartDetail");

                    b.Navigation("ComboFastFood");
                });

            modelBuilder.Entity("AppData.Models.MainDishes", b =>
                {
                    b.Navigation("BillDetail");

                    b.Navigation("CartDetail");

                    b.Navigation("ComboFastFood");
                });

            modelBuilder.Entity("AppData.Models.Payments", b =>
                {
                    b.Navigation("bills");
                });

            modelBuilder.Entity("AppData.Models.Role", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("AppData.Models.Setkey", b =>
                {
                    b.Navigation("CartDetail");
                });

            modelBuilder.Entity("AppData.Models.SideDishes", b =>
                {
                    b.Navigation("BillDetail");

                    b.Navigation("CartDetail");

                    b.Navigation("ComboFastFood");
                });

            modelBuilder.Entity("AppData.Models.Voucher", b =>
                {
                    b.Navigation("Bill");
                });
#pragma warning restore 612, 618
        }
    }
}
